#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from paymentpoint import PaymentPoint
from paymentpoint.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  FinnetStruct sendInquiryFinnet(string billNumber, string billerCode, string productCode, string internalCode, string username, i32 account_id)'
  print '  FinnetStruct sendInquiryPrepaidFinnet(string billNumber, string billerCode, string productCode, string internalCode, string username, i32 account_id)'
  print '  FinnetStruct sendPaymentFinnet(string billNumber, string billerCode, string productCode, string internalCode, string trx_id, string username, i32 account_id, i64 amount, i32 feeAmount, i32 billerFee, string bit61)'
  print '  FinnetStruct sendCheckStatusFinnet(string billNumber, string billerCode, string productCode, string internalCode, string trx_id, i32 account_id)'
  print '  FinnetStruct sendPaymentPrepaidFinnet(string billNumber, string billerCode, string productCode, string internalCode, string username, i32 account_id, i64 amount, string bit61)'
  print '  FinnetStruct sendInquiryNontaglisPLN(string billNumber, string internalCode, string productCode, string username, i32 account_id)'
  print '  FinnetStruct sendPaymentNontaglisPLN(string billNumber, string internalCode, string productCode, string trx_id, string username, i32 account_id, i64 amount, i32 feeAmount, i32 billerFee, string bit61, string counter)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PaymentPoint.Client(protocol)
transport.open()

if cmd == 'sendInquiryFinnet':
  if len(args) != 6:
    print 'sendInquiryFinnet requires 6 args'
    sys.exit(1)
  pp.pprint(client.sendInquiryFinnet(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'sendInquiryPrepaidFinnet':
  if len(args) != 6:
    print 'sendInquiryPrepaidFinnet requires 6 args'
    sys.exit(1)
  pp.pprint(client.sendInquiryPrepaidFinnet(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'sendPaymentFinnet':
  if len(args) != 11:
    print 'sendPaymentFinnet requires 11 args'
    sys.exit(1)
  pp.pprint(client.sendPaymentFinnet(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),eval(args[7]),eval(args[8]),eval(args[9]),args[10],))

elif cmd == 'sendCheckStatusFinnet':
  if len(args) != 6:
    print 'sendCheckStatusFinnet requires 6 args'
    sys.exit(1)
  pp.pprint(client.sendCheckStatusFinnet(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'sendPaymentPrepaidFinnet':
  if len(args) != 8:
    print 'sendPaymentPrepaidFinnet requires 8 args'
    sys.exit(1)
  pp.pprint(client.sendPaymentPrepaidFinnet(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),args[7],))

elif cmd == 'sendInquiryNontaglisPLN':
  if len(args) != 5:
    print 'sendInquiryNontaglisPLN requires 5 args'
    sys.exit(1)
  pp.pprint(client.sendInquiryNontaglisPLN(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'sendPaymentNontaglisPLN':
  if len(args) != 11:
    print 'sendPaymentNontaglisPLN requires 11 args'
    sys.exit(1)
  pp.pprint(client.sendPaymentNontaglisPLN(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),args[9],args[10],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
