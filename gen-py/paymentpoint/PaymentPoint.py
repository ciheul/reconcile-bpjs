#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def sendInquiryFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - username
     - account_id
    """
    pass

  def sendInquiryPrepaidFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - username
     - account_id
    """
    pass

  def sendPaymentFinnet(self, billNumber, billerCode, productCode, internalCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - trx_id
     - username
     - account_id
     - amount
     - feeAmount
     - billerFee
     - bit61
    """
    pass

  def sendCheckStatusFinnet(self, billNumber, billerCode, productCode, internalCode, trx_id, account_id):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - trx_id
     - account_id
    """
    pass

  def sendPaymentPrepaidFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id, amount, bit61):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - username
     - account_id
     - amount
     - bit61
    """
    pass

  def sendInquiryNontaglisPLN(self, billNumber, internalCode, productCode, username, account_id):
    """
    Parameters:
     - billNumber
     - internalCode
     - productCode
     - username
     - account_id
    """
    pass

  def sendPaymentNontaglisPLN(self, billNumber, internalCode, productCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61, counter):
    """
    Parameters:
     - billNumber
     - internalCode
     - productCode
     - trx_id
     - username
     - account_id
     - amount
     - feeAmount
     - billerFee
     - bit61
     - counter
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def sendInquiryFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - username
     - account_id
    """
    self.send_sendInquiryFinnet(billNumber, billerCode, productCode, internalCode, username, account_id)
    return self.recv_sendInquiryFinnet()

  def send_sendInquiryFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id):
    self._oprot.writeMessageBegin('sendInquiryFinnet', TMessageType.CALL, self._seqid)
    args = sendInquiryFinnet_args()
    args.billNumber = billNumber
    args.billerCode = billerCode
    args.productCode = productCode
    args.internalCode = internalCode
    args.username = username
    args.account_id = account_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendInquiryFinnet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendInquiryFinnet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendInquiryFinnet failed: unknown result");

  def sendInquiryPrepaidFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - username
     - account_id
    """
    self.send_sendInquiryPrepaidFinnet(billNumber, billerCode, productCode, internalCode, username, account_id)
    return self.recv_sendInquiryPrepaidFinnet()

  def send_sendInquiryPrepaidFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id):
    self._oprot.writeMessageBegin('sendInquiryPrepaidFinnet', TMessageType.CALL, self._seqid)
    args = sendInquiryPrepaidFinnet_args()
    args.billNumber = billNumber
    args.billerCode = billerCode
    args.productCode = productCode
    args.internalCode = internalCode
    args.username = username
    args.account_id = account_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendInquiryPrepaidFinnet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendInquiryPrepaidFinnet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendInquiryPrepaidFinnet failed: unknown result");

  def sendPaymentFinnet(self, billNumber, billerCode, productCode, internalCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - trx_id
     - username
     - account_id
     - amount
     - feeAmount
     - billerFee
     - bit61
    """
    self.send_sendPaymentFinnet(billNumber, billerCode, productCode, internalCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61)
    return self.recv_sendPaymentFinnet()

  def send_sendPaymentFinnet(self, billNumber, billerCode, productCode, internalCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61):
    self._oprot.writeMessageBegin('sendPaymentFinnet', TMessageType.CALL, self._seqid)
    args = sendPaymentFinnet_args()
    args.billNumber = billNumber
    args.billerCode = billerCode
    args.productCode = productCode
    args.internalCode = internalCode
    args.trx_id = trx_id
    args.username = username
    args.account_id = account_id
    args.amount = amount
    args.feeAmount = feeAmount
    args.billerFee = billerFee
    args.bit61 = bit61
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendPaymentFinnet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendPaymentFinnet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendPaymentFinnet failed: unknown result");

  def sendCheckStatusFinnet(self, billNumber, billerCode, productCode, internalCode, trx_id, account_id):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - trx_id
     - account_id
    """
    self.send_sendCheckStatusFinnet(billNumber, billerCode, productCode, internalCode, trx_id, account_id)
    return self.recv_sendCheckStatusFinnet()

  def send_sendCheckStatusFinnet(self, billNumber, billerCode, productCode, internalCode, trx_id, account_id):
    self._oprot.writeMessageBegin('sendCheckStatusFinnet', TMessageType.CALL, self._seqid)
    args = sendCheckStatusFinnet_args()
    args.billNumber = billNumber
    args.billerCode = billerCode
    args.productCode = productCode
    args.internalCode = internalCode
    args.trx_id = trx_id
    args.account_id = account_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendCheckStatusFinnet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendCheckStatusFinnet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendCheckStatusFinnet failed: unknown result");

  def sendPaymentPrepaidFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id, amount, bit61):
    """
    Parameters:
     - billNumber
     - billerCode
     - productCode
     - internalCode
     - username
     - account_id
     - amount
     - bit61
    """
    self.send_sendPaymentPrepaidFinnet(billNumber, billerCode, productCode, internalCode, username, account_id, amount, bit61)
    return self.recv_sendPaymentPrepaidFinnet()

  def send_sendPaymentPrepaidFinnet(self, billNumber, billerCode, productCode, internalCode, username, account_id, amount, bit61):
    self._oprot.writeMessageBegin('sendPaymentPrepaidFinnet', TMessageType.CALL, self._seqid)
    args = sendPaymentPrepaidFinnet_args()
    args.billNumber = billNumber
    args.billerCode = billerCode
    args.productCode = productCode
    args.internalCode = internalCode
    args.username = username
    args.account_id = account_id
    args.amount = amount
    args.bit61 = bit61
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendPaymentPrepaidFinnet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendPaymentPrepaidFinnet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendPaymentPrepaidFinnet failed: unknown result");

  def sendInquiryNontaglisPLN(self, billNumber, internalCode, productCode, username, account_id):
    """
    Parameters:
     - billNumber
     - internalCode
     - productCode
     - username
     - account_id
    """
    self.send_sendInquiryNontaglisPLN(billNumber, internalCode, productCode, username, account_id)
    return self.recv_sendInquiryNontaglisPLN()

  def send_sendInquiryNontaglisPLN(self, billNumber, internalCode, productCode, username, account_id):
    self._oprot.writeMessageBegin('sendInquiryNontaglisPLN', TMessageType.CALL, self._seqid)
    args = sendInquiryNontaglisPLN_args()
    args.billNumber = billNumber
    args.internalCode = internalCode
    args.productCode = productCode
    args.username = username
    args.account_id = account_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendInquiryNontaglisPLN(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendInquiryNontaglisPLN_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendInquiryNontaglisPLN failed: unknown result");

  def sendPaymentNontaglisPLN(self, billNumber, internalCode, productCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61, counter):
    """
    Parameters:
     - billNumber
     - internalCode
     - productCode
     - trx_id
     - username
     - account_id
     - amount
     - feeAmount
     - billerFee
     - bit61
     - counter
    """
    self.send_sendPaymentNontaglisPLN(billNumber, internalCode, productCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61, counter)
    return self.recv_sendPaymentNontaglisPLN()

  def send_sendPaymentNontaglisPLN(self, billNumber, internalCode, productCode, trx_id, username, account_id, amount, feeAmount, billerFee, bit61, counter):
    self._oprot.writeMessageBegin('sendPaymentNontaglisPLN', TMessageType.CALL, self._seqid)
    args = sendPaymentNontaglisPLN_args()
    args.billNumber = billNumber
    args.internalCode = internalCode
    args.productCode = productCode
    args.trx_id = trx_id
    args.username = username
    args.account_id = account_id
    args.amount = amount
    args.feeAmount = feeAmount
    args.billerFee = billerFee
    args.bit61 = bit61
    args.counter = counter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendPaymentNontaglisPLN(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendPaymentNontaglisPLN_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendPaymentNontaglisPLN failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["sendInquiryFinnet"] = Processor.process_sendInquiryFinnet
    self._processMap["sendInquiryPrepaidFinnet"] = Processor.process_sendInquiryPrepaidFinnet
    self._processMap["sendPaymentFinnet"] = Processor.process_sendPaymentFinnet
    self._processMap["sendCheckStatusFinnet"] = Processor.process_sendCheckStatusFinnet
    self._processMap["sendPaymentPrepaidFinnet"] = Processor.process_sendPaymentPrepaidFinnet
    self._processMap["sendInquiryNontaglisPLN"] = Processor.process_sendInquiryNontaglisPLN
    self._processMap["sendPaymentNontaglisPLN"] = Processor.process_sendPaymentNontaglisPLN

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_sendInquiryFinnet(self, seqid, iprot, oprot):
    args = sendInquiryFinnet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendInquiryFinnet_result()
    result.success = self._handler.sendInquiryFinnet(args.billNumber, args.billerCode, args.productCode, args.internalCode, args.username, args.account_id)
    oprot.writeMessageBegin("sendInquiryFinnet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendInquiryPrepaidFinnet(self, seqid, iprot, oprot):
    args = sendInquiryPrepaidFinnet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendInquiryPrepaidFinnet_result()
    result.success = self._handler.sendInquiryPrepaidFinnet(args.billNumber, args.billerCode, args.productCode, args.internalCode, args.username, args.account_id)
    oprot.writeMessageBegin("sendInquiryPrepaidFinnet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendPaymentFinnet(self, seqid, iprot, oprot):
    args = sendPaymentFinnet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendPaymentFinnet_result()
    result.success = self._handler.sendPaymentFinnet(args.billNumber, args.billerCode, args.productCode, args.internalCode, args.trx_id, args.username, args.account_id, args.amount, args.feeAmount, args.billerFee, args.bit61)
    oprot.writeMessageBegin("sendPaymentFinnet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendCheckStatusFinnet(self, seqid, iprot, oprot):
    args = sendCheckStatusFinnet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendCheckStatusFinnet_result()
    result.success = self._handler.sendCheckStatusFinnet(args.billNumber, args.billerCode, args.productCode, args.internalCode, args.trx_id, args.account_id)
    oprot.writeMessageBegin("sendCheckStatusFinnet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendPaymentPrepaidFinnet(self, seqid, iprot, oprot):
    args = sendPaymentPrepaidFinnet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendPaymentPrepaidFinnet_result()
    result.success = self._handler.sendPaymentPrepaidFinnet(args.billNumber, args.billerCode, args.productCode, args.internalCode, args.username, args.account_id, args.amount, args.bit61)
    oprot.writeMessageBegin("sendPaymentPrepaidFinnet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendInquiryNontaglisPLN(self, seqid, iprot, oprot):
    args = sendInquiryNontaglisPLN_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendInquiryNontaglisPLN_result()
    result.success = self._handler.sendInquiryNontaglisPLN(args.billNumber, args.internalCode, args.productCode, args.username, args.account_id)
    oprot.writeMessageBegin("sendInquiryNontaglisPLN", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendPaymentNontaglisPLN(self, seqid, iprot, oprot):
    args = sendPaymentNontaglisPLN_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendPaymentNontaglisPLN_result()
    result.success = self._handler.sendPaymentNontaglisPLN(args.billNumber, args.internalCode, args.productCode, args.trx_id, args.username, args.account_id, args.amount, args.feeAmount, args.billerFee, args.bit61, args.counter)
    oprot.writeMessageBegin("sendPaymentNontaglisPLN", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class sendInquiryFinnet_args:
  """
  Attributes:
   - billNumber
   - billerCode
   - productCode
   - internalCode
   - username
   - account_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'billerCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'internalCode', None, None, ), # 4
    (5, TType.STRING, 'username', None, None, ), # 5
    (6, TType.I32, 'account_id', None, None, ), # 6
  )

  def __init__(self, billNumber=None, billerCode=None, productCode=None, internalCode=None, username=None, account_id=None,):
    self.billNumber = billNumber
    self.billerCode = billerCode
    self.productCode = productCode
    self.internalCode = internalCode
    self.username = username
    self.account_id = account_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.billerCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendInquiryFinnet_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.billerCode is not None:
      oprot.writeFieldBegin('billerCode', TType.STRING, 2)
      oprot.writeString(self.billerCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 4)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 5)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 6)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendInquiryFinnet_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendInquiryFinnet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendInquiryPrepaidFinnet_args:
  """
  Attributes:
   - billNumber
   - billerCode
   - productCode
   - internalCode
   - username
   - account_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'billerCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'internalCode', None, None, ), # 4
    (5, TType.STRING, 'username', None, None, ), # 5
    (6, TType.I32, 'account_id', None, None, ), # 6
  )

  def __init__(self, billNumber=None, billerCode=None, productCode=None, internalCode=None, username=None, account_id=None,):
    self.billNumber = billNumber
    self.billerCode = billerCode
    self.productCode = productCode
    self.internalCode = internalCode
    self.username = username
    self.account_id = account_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.billerCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendInquiryPrepaidFinnet_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.billerCode is not None:
      oprot.writeFieldBegin('billerCode', TType.STRING, 2)
      oprot.writeString(self.billerCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 4)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 5)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 6)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendInquiryPrepaidFinnet_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendInquiryPrepaidFinnet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPaymentFinnet_args:
  """
  Attributes:
   - billNumber
   - billerCode
   - productCode
   - internalCode
   - trx_id
   - username
   - account_id
   - amount
   - feeAmount
   - billerFee
   - bit61
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'billerCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'internalCode', None, None, ), # 4
    (5, TType.STRING, 'trx_id', None, None, ), # 5
    (6, TType.STRING, 'username', None, None, ), # 6
    (7, TType.I32, 'account_id', None, None, ), # 7
    (8, TType.I64, 'amount', None, None, ), # 8
    (9, TType.I32, 'feeAmount', None, None, ), # 9
    (10, TType.I32, 'billerFee', None, None, ), # 10
    (11, TType.STRING, 'bit61', None, None, ), # 11
  )

  def __init__(self, billNumber=None, billerCode=None, productCode=None, internalCode=None, trx_id=None, username=None, account_id=None, amount=None, feeAmount=None, billerFee=None, bit61=None,):
    self.billNumber = billNumber
    self.billerCode = billerCode
    self.productCode = productCode
    self.internalCode = internalCode
    self.trx_id = trx_id
    self.username = username
    self.account_id = account_id
    self.amount = amount
    self.feeAmount = feeAmount
    self.billerFee = billerFee
    self.bit61 = bit61

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.billerCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.trx_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.amount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.feeAmount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.billerFee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.bit61 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPaymentFinnet_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.billerCode is not None:
      oprot.writeFieldBegin('billerCode', TType.STRING, 2)
      oprot.writeString(self.billerCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 4)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.trx_id is not None:
      oprot.writeFieldBegin('trx_id', TType.STRING, 5)
      oprot.writeString(self.trx_id)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 6)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 7)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I64, 8)
      oprot.writeI64(self.amount)
      oprot.writeFieldEnd()
    if self.feeAmount is not None:
      oprot.writeFieldBegin('feeAmount', TType.I32, 9)
      oprot.writeI32(self.feeAmount)
      oprot.writeFieldEnd()
    if self.billerFee is not None:
      oprot.writeFieldBegin('billerFee', TType.I32, 10)
      oprot.writeI32(self.billerFee)
      oprot.writeFieldEnd()
    if self.bit61 is not None:
      oprot.writeFieldBegin('bit61', TType.STRING, 11)
      oprot.writeString(self.bit61)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPaymentFinnet_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPaymentFinnet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendCheckStatusFinnet_args:
  """
  Attributes:
   - billNumber
   - billerCode
   - productCode
   - internalCode
   - trx_id
   - account_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'billerCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'internalCode', None, None, ), # 4
    (5, TType.STRING, 'trx_id', None, None, ), # 5
    (6, TType.I32, 'account_id', None, None, ), # 6
  )

  def __init__(self, billNumber=None, billerCode=None, productCode=None, internalCode=None, trx_id=None, account_id=None,):
    self.billNumber = billNumber
    self.billerCode = billerCode
    self.productCode = productCode
    self.internalCode = internalCode
    self.trx_id = trx_id
    self.account_id = account_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.billerCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.trx_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendCheckStatusFinnet_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.billerCode is not None:
      oprot.writeFieldBegin('billerCode', TType.STRING, 2)
      oprot.writeString(self.billerCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 4)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.trx_id is not None:
      oprot.writeFieldBegin('trx_id', TType.STRING, 5)
      oprot.writeString(self.trx_id)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 6)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendCheckStatusFinnet_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendCheckStatusFinnet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPaymentPrepaidFinnet_args:
  """
  Attributes:
   - billNumber
   - billerCode
   - productCode
   - internalCode
   - username
   - account_id
   - amount
   - bit61
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'billerCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'internalCode', None, None, ), # 4
    (5, TType.STRING, 'username', None, None, ), # 5
    (6, TType.I32, 'account_id', None, None, ), # 6
    (7, TType.I64, 'amount', None, None, ), # 7
    (8, TType.STRING, 'bit61', None, None, ), # 8
  )

  def __init__(self, billNumber=None, billerCode=None, productCode=None, internalCode=None, username=None, account_id=None, amount=None, bit61=None,):
    self.billNumber = billNumber
    self.billerCode = billerCode
    self.productCode = productCode
    self.internalCode = internalCode
    self.username = username
    self.account_id = account_id
    self.amount = amount
    self.bit61 = bit61

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.billerCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.amount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bit61 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPaymentPrepaidFinnet_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.billerCode is not None:
      oprot.writeFieldBegin('billerCode', TType.STRING, 2)
      oprot.writeString(self.billerCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 4)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 5)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 6)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I64, 7)
      oprot.writeI64(self.amount)
      oprot.writeFieldEnd()
    if self.bit61 is not None:
      oprot.writeFieldBegin('bit61', TType.STRING, 8)
      oprot.writeString(self.bit61)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPaymentPrepaidFinnet_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPaymentPrepaidFinnet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendInquiryNontaglisPLN_args:
  """
  Attributes:
   - billNumber
   - internalCode
   - productCode
   - username
   - account_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'internalCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'username', None, None, ), # 4
    (5, TType.I32, 'account_id', None, None, ), # 5
  )

  def __init__(self, billNumber=None, internalCode=None, productCode=None, username=None, account_id=None,):
    self.billNumber = billNumber
    self.internalCode = internalCode
    self.productCode = productCode
    self.username = username
    self.account_id = account_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendInquiryNontaglisPLN_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 2)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 4)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 5)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendInquiryNontaglisPLN_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendInquiryNontaglisPLN_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPaymentNontaglisPLN_args:
  """
  Attributes:
   - billNumber
   - internalCode
   - productCode
   - trx_id
   - username
   - account_id
   - amount
   - feeAmount
   - billerFee
   - bit61
   - counter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'billNumber', None, None, ), # 1
    (2, TType.STRING, 'internalCode', None, None, ), # 2
    (3, TType.STRING, 'productCode', None, None, ), # 3
    (4, TType.STRING, 'trx_id', None, None, ), # 4
    (5, TType.STRING, 'username', None, None, ), # 5
    (6, TType.I32, 'account_id', None, None, ), # 6
    (7, TType.I64, 'amount', None, None, ), # 7
    None, # 8
    (9, TType.I32, 'feeAmount', None, None, ), # 9
    (10, TType.I32, 'billerFee', None, None, ), # 10
    (11, TType.STRING, 'bit61', None, None, ), # 11
    (12, TType.STRING, 'counter', None, None, ), # 12
  )

  def __init__(self, billNumber=None, internalCode=None, productCode=None, trx_id=None, username=None, account_id=None, amount=None, feeAmount=None, billerFee=None, bit61=None, counter=None,):
    self.billNumber = billNumber
    self.internalCode = internalCode
    self.productCode = productCode
    self.trx_id = trx_id
    self.username = username
    self.account_id = account_id
    self.amount = amount
    self.feeAmount = feeAmount
    self.billerFee = billerFee
    self.bit61 = bit61
    self.counter = counter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.billNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.internalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.productCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trx_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.account_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.amount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.feeAmount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.billerFee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.bit61 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.counter = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPaymentNontaglisPLN_args')
    if self.billNumber is not None:
      oprot.writeFieldBegin('billNumber', TType.STRING, 1)
      oprot.writeString(self.billNumber)
      oprot.writeFieldEnd()
    if self.internalCode is not None:
      oprot.writeFieldBegin('internalCode', TType.STRING, 2)
      oprot.writeString(self.internalCode)
      oprot.writeFieldEnd()
    if self.productCode is not None:
      oprot.writeFieldBegin('productCode', TType.STRING, 3)
      oprot.writeString(self.productCode)
      oprot.writeFieldEnd()
    if self.trx_id is not None:
      oprot.writeFieldBegin('trx_id', TType.STRING, 4)
      oprot.writeString(self.trx_id)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 5)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 6)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I64, 7)
      oprot.writeI64(self.amount)
      oprot.writeFieldEnd()
    if self.feeAmount is not None:
      oprot.writeFieldBegin('feeAmount', TType.I32, 9)
      oprot.writeI32(self.feeAmount)
      oprot.writeFieldEnd()
    if self.billerFee is not None:
      oprot.writeFieldBegin('billerFee', TType.I32, 10)
      oprot.writeI32(self.billerFee)
      oprot.writeFieldEnd()
    if self.bit61 is not None:
      oprot.writeFieldBegin('bit61', TType.STRING, 11)
      oprot.writeString(self.bit61)
      oprot.writeFieldEnd()
    if self.counter is not None:
      oprot.writeFieldBegin('counter', TType.STRING, 12)
      oprot.writeString(self.counter)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPaymentNontaglisPLN_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FinnetStruct, FinnetStruct.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = FinnetStruct()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPaymentNontaglisPLN_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
