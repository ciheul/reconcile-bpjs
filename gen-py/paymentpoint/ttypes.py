#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FinnetStruct:
  """
  Attributes:
   - amount
   - feeAmount
   - bit61
   - bit48
   - bit39
   - trx_id
   - timestamp
   - error_msg
   - counter
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'amount', None, 0, ), # 1
    (2, TType.I32, 'feeAmount', None, 0, ), # 2
    (3, TType.STRING, 'bit61', None, None, ), # 3
    (4, TType.STRING, 'bit48', None, None, ), # 4
    (5, TType.STRING, 'bit39', None, None, ), # 5
    (6, TType.STRING, 'trx_id', None, None, ), # 6
    (7, TType.STRING, 'timestamp', None, None, ), # 7
    (8, TType.STRING, 'error_msg', None, None, ), # 8
    (9, TType.STRING, 'counter', None, None, ), # 9
  )

  def __init__(self, amount=thrift_spec[1][4], feeAmount=thrift_spec[2][4], bit61=None, bit48=None, bit39=None, trx_id=None, timestamp=None, error_msg=None, counter=None,):
    self.amount = amount
    self.feeAmount = feeAmount
    self.bit61 = bit61
    self.bit48 = bit48
    self.bit39 = bit39
    self.trx_id = trx_id
    self.timestamp = timestamp
    self.error_msg = error_msg
    self.counter = counter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.amount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.feeAmount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bit61 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bit48 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bit39 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.trx_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.counter = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FinnetStruct')
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I64, 1)
      oprot.writeI64(self.amount)
      oprot.writeFieldEnd()
    if self.feeAmount is not None:
      oprot.writeFieldBegin('feeAmount', TType.I32, 2)
      oprot.writeI32(self.feeAmount)
      oprot.writeFieldEnd()
    if self.bit61 is not None:
      oprot.writeFieldBegin('bit61', TType.STRING, 3)
      oprot.writeString(self.bit61)
      oprot.writeFieldEnd()
    if self.bit48 is not None:
      oprot.writeFieldBegin('bit48', TType.STRING, 4)
      oprot.writeString(self.bit48)
      oprot.writeFieldEnd()
    if self.bit39 is not None:
      oprot.writeFieldBegin('bit39', TType.STRING, 5)
      oprot.writeString(self.bit39)
      oprot.writeFieldEnd()
    if self.trx_id is not None:
      oprot.writeFieldBegin('trx_id', TType.STRING, 6)
      oprot.writeString(self.trx_id)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 7)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 8)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    if self.counter is not None:
      oprot.writeFieldBegin('counter', TType.STRING, 9)
      oprot.writeString(self.counter)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
